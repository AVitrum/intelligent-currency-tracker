@using Domain.Enums
@using Shared.Dtos
@using Shared.Helpers
@using Shared.Payload.Responses.Identity
@using UI.Common.Interfaces
@using UI.Services
@inject IJSRuntime Js
@inject NavigationManager Navigation
@inject LocalizationService Localizer
@inject UserSettingsService UserSettingsService
@inject IHttpClientService HttpClientService
@inject HttpClient Http
@inject IConfiguration Configuration
@implements IAsyncDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">@_navbarBrand</a>
        <button title="@_navbarToggleMenuTitle" class="navbar-toggler" @onclick="() => OnToggleSidebar.InvokeAsync()">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="nav-scrollable @(HideNavItems ? "nav-hidden" : "")" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item">
            <NavLink class="nav-link" href="posts" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
                @_navNews
            </NavLink>
        </div>
        @if (!_isTokenPresent)
        {
            <div class="nav-item">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
                    @_navHome
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="auth">
                    <span class="bi bi-person-nav-menu" aria-hidden="true"></span>
                    @_navAuth
                </NavLink>
            </div>
        }
        else
        {
            if (_userRole == nameof(UserRole.PUBLISHER))
            {
                <div class="nav-item">
                    <NavLink class="nav-link" href="create-post">
                        <span class="bi bi-chart-nav-menu" aria-hidden="true"></span>
                        @_navCreatePost
                    </NavLink>
                </div>
                
                @*For Edit *@
                
                @* <div class="nav-item"> *@
                @*     <NavLink class="nav-link" href="dashboard"> *@
                @*         <span class="bi bi-chart-nav-menu" aria-hidden="true"></span> *@
                @*         @_navDashboard *@
                @*     </NavLink> *@
                @* </div> *@
            }
            
            
            <div class="nav-item">
                <NavLink class="nav-link" href="dashboard">
                    <span class="bi bi-chart-nav-menu" aria-hidden="true"></span>
                    @_navDashboard
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="forecast">
                    <span class="bi bi-chart-nav-menu" aria-hidden="true"></span>
                    @_navPredictiveCharts
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="tracked-charts">
                    <span class="bi bi-chart-nav-menu" aria-hidden="true"></span>
                    @_navTrackedCharts
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="compare-currencies">
                    <span class="bi bi-chart-nav-menu" aria-hidden="true"></span>
                    @_navCompareCurrencies
                </NavLink>
            </div>

            <div class="nav-item">
                <button class="nav-link" @onclick="Logout">
                    <span class="bi bi-logout-nav-menu" aria-hidden="true"></span>
                    @_navLogout
                </button>
            </div>
        }
    </nav>
</div>

@code {
    [Parameter] public EventCallback OnToggleSidebar { get; set; }
    [Parameter] public bool HideNavItems { get; set; }

    private bool _collapseNavMenu;
    private bool _isTokenPresent;
    
    private string _userRole = string.Empty;

    private string _navbarBrand = "";
    private string _navbarToggleMenuTitle = "";
    private string _navNews = "";
    private string _navHome = "";
    private string _navAuth = "";
    private string _navCreatePost = "";
    private string _navDashboard = "";
    private string _navPredictiveCharts = "";
    private string _navTrackedCharts = "";
    private string _navCompareCurrencies = "";
    private string _navLogout = "";

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(await JwtTokenHelper.GetJwtTokenFromCookies(Js)))
        {
            _userRole = await GetUserRoleAsync() ?? string.Empty;
        }
        
        if (UserSettingsService != null)
        {
            UserSettingsService.OnSettingsChangedAsync += HandleSettingsChangedAsync;
        }

        _isTokenPresent = await JwtTokenHelper.GetJwtTokenFromCookies(Js) != null;
        await LoadLocalizedStringsAsync();
    }

    private async Task LoadLocalizedStringsAsync()
    {
        _navbarBrand = await Localizer.GetStringAsync("navbar.brand");
        _navbarToggleMenuTitle = await Localizer.GetStringAsync("navbar.toggle_menu_title");
        _navNews = await Localizer.GetStringAsync("nav.news");
        _navHome = await Localizer.GetStringAsync("nav.home");
        _navAuth = await Localizer.GetStringAsync("nav.auth");
        _navCreatePost = await Localizer.GetStringAsync("nav.create_post");
        _navDashboard = await Localizer.GetStringAsync("nav.dashboard");
        _navPredictiveCharts = await Localizer.GetStringAsync("nav.predictive_charts");
        _navTrackedCharts = await Localizer.GetStringAsync("nav.tracked_charts");
        _navCompareCurrencies = await Localizer.GetStringAsync("nav.compare_currencies");
        _navLogout = await Localizer.GetStringAsync("nav.logout");
    }

    private async Task HandleSettingsChangedAsync()
    {
        _isTokenPresent = await JwtTokenHelper.GetJwtTokenFromCookies(Js) != null;
        await LoadLocalizedStringsAsync();
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private async Task<string?> GetUserRoleAsync()
    {
        try
        {
            string url = $"{Configuration.ApiUrl}/Identity/get-user-role";
            HttpResponseMessage resp = await HttpClientService.SendRequestAsync(() => Http.GetAsync(url));
            UserRoleResponse? response = await resp.Content.ReadFromJsonAsync<UserRoleResponse>();


            if (resp.IsSuccessStatusCode && response?.Role != null)
            {
                return response.Role;
            }
            
            return null;
        }
        catch (Exception)
        {
            return string.Empty;
        }
    }
    
    private async Task Logout()
    {
        SettingsDto settings = await UserSettingsService.GetSettingsAsync(Js);
        settings.Language = "en";
        await UserSettingsService.SaveSettingsAsync(settings, Js);
        await JwtTokenHelper.RemoveJwtTokensFromCookiesAsync(Js, Navigation);
    }

    public async ValueTask DisposeAsync()
    {
        if (UserSettingsService != null)
        {
            UserSettingsService.OnSettingsChangedAsync -= HandleSettingsChangedAsync;
        }

        await Task.CompletedTask;
    }
}