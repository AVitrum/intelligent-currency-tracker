@page "/role-manager"
@using System.Net
@using DevUI.Configurations
@using DevUI.Helpers
@using Domain.Enums
@using Shared.Payload.Requests
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IDevUISettings DevUISettings
@inject IJSRuntime Js
@inject IToastService ToastService

<div class="registration-container">
    <div class="form-card">
        <h3 class="form-title">Provide Admin Functionality</h3>

        <EditForm Model="@_roleChangeRequest" OnValidSubmit="@HandleRoleChange" class="registration-form">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="email" class="form-label">Identifier</label>
                <InputText id="email" @bind-Value="_roleChangeRequest.Email" class="form-control"
                           placeholder="Enter user identifier" @oninput="SearchEmailSuggestions"/>
                <ValidationMessage For="@(() => _roleChangeRequest.Email)"/>
                @if (_emailSuggestions.Any())
                {
                    <ul class="suggestions-list">
                        @foreach (var suggestion in _emailSuggestions)
                        {
                            <li @onclick="() => SelectSuggestedEmail(suggestion)">@suggestion</li>
                        }
                    </ul>
                }
            </div>

            <div class="form-group">
                <label for="roleString" class="form-label">Role</label>
                <InputSelect id="roleString" @bind-Value="_roleChangeRequest.RoleString" class="form-control">
                    @foreach (var role in Enum.GetValues(typeof(UserRole)).Cast<UserRole>())
                    {
                        <option value="@role.ToString()">@role.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _roleChangeRequest.RoleString)"/>
            </div>

            <button type="submit" class="btn-primary">Submit</button>
        </EditForm>

    </div>
</div>

@code {
    private readonly ChangeRoleRequest _roleChangeRequest = new() { RoleString = UserRole.USER.ToString() };
    private string? _jwtToken;
    private List<string> _emailSuggestions = [];

    private async Task HandleRoleChange()
    {
        await JwtTokenHelper.SetJwtTokenInHeaderAsync(Http, Js, Navigation);
        var response = await Http.PostAsJsonAsync($"{DevUISettings.ApiUrl}/Identity/change-role", _roleChangeRequest);

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Role assigned successfully");
            Navigation.NavigateTo("/");
            return;
        }

        HandleUnauthorizedResponse(response.StatusCode);
        
        var errorResponse = response.Content.ReadFromJsonAsAsyncEnumerable<string>();
        await foreach (var error in errorResponse)
        {
            var errorMessage = !string.IsNullOrEmpty(error)
                ? error
                : "Request failed. Please try again later!";

            ToastService.ShowError(errorMessage);
        }

        await Task.Delay(3000);
        ResetRequestFields();
    }

    private async Task SearchEmailSuggestions(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString();
        if (string.IsNullOrEmpty(searchTerm))
        {
            _emailSuggestions.Clear();
            return;
        }

        await JwtTokenHelper.SetJwtTokenInHeaderAsync(Http, Js, Navigation);
        var response = await Http.GetAsync($"{DevUISettings.ApiUrl}/Identity/search-emails?query={searchTerm}");
        HandleUnauthorizedResponse(response.StatusCode);
        
        if (response.IsSuccessStatusCode)
        {
            _emailSuggestions = await response.Content.ReadFromJsonAsync<List<string>>() ?? [];
        }
    }
    
    private void SelectSuggestedEmail(string email)
    {
        _roleChangeRequest.Email = email;
        _emailSuggestions.Clear();
    }

    private void ResetRequestFields()
    {
        _roleChangeRequest.Email = string.Empty;
    }

    private void HandleUnauthorizedResponse(HttpStatusCode statusCode)
    {
        if (statusCode == HttpStatusCode.Unauthorized)
        {
            Navigation.NavigateTo("/login");
        }
    }

}
