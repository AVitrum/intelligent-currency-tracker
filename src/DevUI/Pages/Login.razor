@page "/login"
@using Domain.Enums
@using Shared.Payload
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService ToastService

<div class="login-container">
    <div class="form-card">
        <h3 class="form-title">Login into your account</h3>
        <p class="form-subtitle">Login and Begin.</p>

        <EditForm Model="@_request" OnValidSubmit="@HandleValidSubmit" class="registration-form">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" @bind-Value="_request.Email" class="form-control"
                           placeholder="Enter your email or username"/>
                <ValidationMessage For="@(() => _request.Email)"/>
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" @bind-Value="_request.Password" type="password" class="form-control"
                           placeholder="Enter your password"/>
                <ValidationMessage For="@(() => _request.Password)"/>
            </div>

            <button type="submit" class="btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert error-alert">@_errorMessage</div>
}

@code {
    private readonly LoginRequest _request = new() { Provider = LoginManagerProvider.DevUI.ToString() };

    [Inject] private IJSRuntime Js { get; set; } = null!;
    private string? _errorMessage;

    private async Task HandleValidSubmit()
    {
        // var apiUrl = Env.GetString("API_URL");

        if (_request.Email is not null && !_request.Email.Contains("@"))
        {
            _request.UserName = _request.Email;
            _request.Email = string.Empty;
        }

        var response = await Http.PostAsJsonAsync("/api/Identity/login", _request);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadFromJsonAsync<LoginResponse>();
            if (responseContent?.Token is not null)
            {
                await Js.InvokeVoidAsync("localStorage.setItem", "jwtToken", responseContent.Token);
                ToastService.ShowSuccess("User successfully login!");
                Navigation.NavigateTo("/", true);
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadAsStringAsync();
            var errorMessage = !string.IsNullOrEmpty(errorResponse)
                ? errorResponse
                : "Login failed. Please try again.";

            ToastService.ShowError(errorMessage);

            await Task.Delay(3000);
            _errorMessage = null;
            _request.Email = string.Empty;
            _request.UserName = string.Empty;
            _request.Password = string.Empty;
        }
    }

    private record LoginResponse(string Token);

}
