services:
  db:
    image: postgres:alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - test-network
  
  backup:
    image: postgres:alpine
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    depends_on:
      - db
    networks:
      - test-network
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      while true; do
        pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME > /backups/backup_$(date +%Y%m%d%H%M%S).sql;
        sleep 3600;
      done"
  
  minio:
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9090:9090"
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9090"
    networks:
      - test-network
  
  webapi:
    image: webapi
    build:
      context: .
      dockerfile: src/WebApi/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:5001"
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      JWT_KEY: ${JWT_KEY}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GMAIL_EMAIL: ${GMAIL_EMAIL}
      GMAIL_PASSWORD: ${GMAIL_PASSWORD}
      MODEL_URL: ${MODEL_URL}
      PRIVATE_BANK_URL: ${PRIVATE_BANK_URL}
      NBU_URL: ${NBU_URL}
      KAFKA_HOST: ${KAFKA_HOST}
    ports:
      - "5001:5001"
    volumes:
      - ~/.aspnet/https:/https:ro
      - ./logs:/app/logs
    depends_on:
      - db
    #      - kafka
    networks:
      - test-network
  
  model:
    image: model
    build:
      context: .
      dockerfile: src/Model/Dockerfile
    ports:
      - "8000:8000"
    networks:
      - test-network
  
  devui:
    image: devui
    build:
      context: .
      dockerfile: src/DevUI/Dockerfile
    ports:
      - "8003:80"
    networks:
      - test-network
  
  ui:
    image: ui
    build:
      context: .
      dockerfile: src/UI/Dockerfile
    ports:
      - "7135:80"
    networks:
      - test-network
  
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - webapi
      - ui
      - devui
    networks:
      - test-network
    
    #  zoo:
    #    image: confluentinc/cp-zookeeper:latest
    #    hostname: zoo
    #    container_name: zoo
    #    ports:
    #      - "2181:2181"
    #    environment:
    #      ZOOKEEPER_CLIENT_PORT: 2181
    #      ZOOKEEPER_SERVER_ID: 1
    #      ZOOKEEPER_SERVERS: zoo:2888:3888
    #    networks:
    #      - test-network
    #  
    #  kafka:
    #    image: confluentinc/cp-kafka:latest
    #    ports:
    #      - "9092:9092"
    #      - "29092:29092"
    #    depends_on:
    #      - zoo
    #    environment:
    #      - KAFKA_ZOOKEEPER_CONNECT=zoo:2181
    #      - KAFKA_BROKERID=1
    #      - ALLOW_PLAINTEXT_LISTENER="yes"
    #      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    #      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
    #      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
    #      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    #      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    #      - KAFKA_MESSAGE_MAX_BYTES=10485760
    #    networks:
    #      - test-network
    #    entrypoint: /bin/sh -c "sleep 30 && /etc/confluent/docker/run"

volumes:
  pgdata:

networks:
  test-network:
